openapi: 3.0.1
info:
  title: Elmenus Lite API
  version: 1.0.0
  description: API for Elmenus Lite


tags:
  - name: Order
    description: Operations related to customer orders
  - name: Cart
    description: Operations related to user carts

  - name: Menu
    description: Operations related to menus creation, update and management

  - name: Menu Item
    description: Operations related to menu items management and customization


paths:
  /api/v1/cart/{customerId}:
    get:
      tags:
        - Cart
      summary: Get cart by customer ID
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the customer whose cart is being requested
      responses:
        '200':
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseCartResponseApiDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/cart/{id}/items:
    get:
      tags:
        - Cart
      summary: Get all items in a cart by cart ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Cart ID
      responses:
        '200':
          description: List of items in the cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusMessage:
                    type: string
                    nullable: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CartItemResponseApiDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/cart/{id}:
    post:
      tags:
        - Cart
      summary: post cart items to cart
      operationId: addOrUpdateCartItems
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Cart ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CartItemRequestApiDto'
      responses:
        '200':
          description: List of items in the cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusMessage:
                    type: string
                    nullable: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CartItemResponseApiDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/cart/{id}/clear:
    delete:
      tags:
        - Cart
      summary: delete all cart items
      operationId: clearCart
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Cart ID
      responses:
        '200':
          description: List of items in the cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusMessage:
                    type: string
                    nullable: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CartItemResponseApiDto'

        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/orders/{orderId}/status/{statusName}:
    put:
      tags:
        - Order
      summary: Update Order Status
      description: Updates an orderâ€™s status, enforcing valid transitions in the order lifecycle, Supports cancellation at any stage.
      operationId: updateOrderStatus
      parameters:
        - name: orderId
          in: path
          required: true
          description: ID of the order to update
          schema:
            type: integer
            example: 8
        - name: statusName
          in: path
          required: true
          description: New status to set for the order (e.g., PREPARING, CANCELLED)
          schema:
            type: string
            example: READY_FOR_PICKUP
      responses:
        '200':
          description: Order status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid input or invalid status transition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Order or status not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/orders/:
    post:
      tags:
        - Order
      summary: Place a new order
      description: Create a new order with customer info, items, and optional promotion code
      operationId: makeOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderApiDto'
      responses:
        '200':
          description: Order placed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/orders/{orderId}:
    get:
      tags:
        - Order
      summary: Get Order Details
      description: Retrieve detailed information about a specific order using its ID.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
            example: 101
          description: ID of the order to retrieve
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderApiDto'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/orders/customers/{customerId}/orders:
    get:
      tags:
        - Order
      summary: Get all orders by customer ID
      description: Retrieves a paginated list of all orders for a specific customer.
      operationId: getOrdersByCustomer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
            example: 23
          description: ID of the customer
        - name: pageNumber
          in: query
          required: false
          schema:
            type: integer
            default: 0
          description: Page number for pagination
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Page size (number of orders per page)
      responses:
        '200':
          description: List of orders retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/OrderApiDto'
                  pageInfo:
                    $ref: '#/components/schemas/PageInfo'
        '404':
          description: Orders not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'



  /api/v1/menus/restaurant/{restaurantId}/all-menus:
    get:
      tags:
        - Menu
      summary: Get all menus by restaurant ID
      description: Retrieves a paginated list of all menus and details for a specific restaurant.
      operationId: getAllMenusForRestaurant
      parameters:
        - name: restaurantId
          in: path
          required: true
          schema:
            type: integer
            example: 23
          description: ID of the restaurant
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
          description: Page number for pagination
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Page size (number of items per page)
      responses:
        '200':
          description: Restaurant's menus retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedMenuApiResponse'
        '404':
          description: Restaurant is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusMessage:
                    type: string
                    example: "Restaurant with id 23 is not found"
                  data:
                    type: object
                    nullable: true

  /api/v1/menus/{menuId}:
    get:
      tags:
        - Menu
      summary: Get menu's details by menu id
      description: Retrieves a paginated list of all items and details for a specific menu.
      operationId: getMenuDetails
      parameters:
        - name: menuId
          in: path
          required: true
          schema:
            type: integer
            example: 23
          description: ID of the menu
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
          description: Page number for pagination
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: Total number of items in the menu
          description: Page size (number of items per page)
      responses:
        '200':
          description: Menu's Details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/MenuApiDto'
                  pageInfo:
                    $ref: '#/components/schemas/PageInfo'
        '404':
          description: Menu is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusMessage:
                    type: string
                    example: "Menu with id {23} is not found"
                  data:
                    type: object
                    nullable: true

    put:
      tags:
        - Menu
      summary: Update menu name
      description: Updates the name of a specific menu by its ID.
      operationId: updateMenuName
      parameters:
        - name: menuId
          in: path
          required: true
          schema:
            type: integer
            example: 10
          description: ID of the menu to be updated
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatedMenuNameRequest'
            example:
              menuName: "New Updated Menu Title"
      responses:
        '200':
          description: Menu name updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                statusMessage: "Menu name updated successfully"
                data: null
                page: null
        '404':
          description: Menu not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusMessage:
                    type: string
                    example: "Menu with id 10 is not found"
                  data:
                    type: object
                    nullable: true

    delete:
      summary: Delete a menu by ID
      description: Deletes a specific menu using its ID.
      tags:
        - Menu
      parameters:
        - name: menuId
          in: path
          required: true
          schema:
            type: integer
            example: 12
          description: ID of the menu to be deleted
      responses:
        '200':
          description: Menu deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusMessage:
                    type: string
                    example: "Menu deleted successfully"
                  data:
                    type: object
                    nullable: true
                  page:
                    type: object
                    nullable: true
        '404':
          description: Menu not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusMessage:
                    type: string
                    example: "Menu with id 12 is not found"
                  data:
                    type: object
                    nullable: true

  /api/v1/menus:
    post:
      tags:
        - Menu
      summary: Add a new menu
      description: Creates a new menu for a specific restaurant.
      operationId: addNewMenu
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuApiRequestDto'
            example:
              menuName: "compo menu"
              restaurantId: 1
      responses:
        '200':
          description: Menu added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusMessage:
                    type: string
                    example: "Menu added successfully"
                  data:
                    type: object
                    nullable: true
                  page:
                    type: object
                    nullable: true
        '404':
          description: Restaurant not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusMessage:
                    type: string
                    example: "Restaurant with id 1 not found"
                  data:
                    type: object
                    nullable: true
                  page:
                    type: object
                    nullable: true

  /api/v1/menu-items/{menuItemId}:
    get:
      tags:
        - Menu Item
      summary: Get menu item details
      description: Retrieves the details of a specific menu item by its ID.
      operationId: getMenuItemDetails
      parameters:
        - name: menuItemId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the menu item
      responses:
        '200':
          description: Menu item details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItemApiDto'
        '404':
          description: Menu item not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusMessage:
                    type: string
                    example: "Menu Item with id [7] is not found"
                  data:
                    type: object
                    nullable: true
                  page:
                    type: object
                    nullable: true

    put:
      tags:
        - Menu Item
      summary: Update menu item
      description: Updates a menu item's details by its ID.
      operationId: updateMenuItem
      parameters:
        - name: menuItemId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the menu item to be updated
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatedMenuItemRequest'
      responses:
        '200':
          description: Menu item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                statusMessage: "Menu item updated successfully"
                data: null
                page: null
        '404':
          description: Menu item not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusMessage:
                    type: string
                    example: "Menu Item with id [7] is not found"
                  data:
                    type: object
                    nullable: true
                  page:
                    type: object
                    nullable: true

    delete:
      tags:
        - Menu Item
      summary: Delete a menu item
      description: Deletes a specific menu item by its ID.
      operationId: deleteMenuItem
      parameters:
        - name: menuItemId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the menu item to be deleted
      responses:
        '200':
          description: Menu item deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                statusMessage: "Menu item deleted successfully"
                data: null
                page: null
        '404':
          description: Menu item not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusMessage:
                    type: string
                    example: "Menu Item with id [7] is not found"
                  data:
                    type: object
                    nullable: true
                  page:
                    type: object
                    nullable: true

  /api/v1/menu-items:
    post:
      tags:
        - Menu Item
      summary: Add new menu item
      description: Adds a new menu item.
      operationId: addNewMenuItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuItemApiRequestDto'
      responses:
        '200':
          description: Menu item added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                statusMessage: "Menu item added successfully"
                data: null
                page: null




components:
  schemas:
    OrderApiDto:
      type: object
      required:
        - customerId
        - items
      properties:
        customerId:
          type: integer
          format: int64
          example: 123
        promotionCode:
          type: string
          example: WELCOME10
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemApiDto'
        address:
          $ref: '#/components/schemas/AddressApiDto'

    OrderItemApiDto:
      type: object
      required:
        - menuItemId
        - quantity
      properties:
        menuItemId:
          type: integer
          format: int64
          example: 45
        quantity:
          type: integer
          example: 2

    AddressApiDto:
      type: object
      properties:
        street:
          type: string
          example: "123 Main St"
        city:
          type: string
          example: "Cairo"
        floor:
          type: string
          example: "2"
        apartment:
          type: string
          example: "5B"
        country:
          type: string
          example: "Egypt"
        state:
          type: string
          example: "Giza"
        location:
          type: string
          example: "29.9876, 31.2111"
        isDefault:
          type: boolean
          example: true

    ApiResponseCartResponseApiDto:
      type: object
      properties:
        statusMessage:
          type: string
          nullable: true
        data:
          $ref: '#/components/schemas/CartResponseApiDto'

    CartResponseApiDto:
      type: object
      properties:
        id:
          type: integer
        cartItemApiDtoList:
          type: array
          items:
            $ref: '#/components/schemas/CartItemResponseApiDto'
        totalPrice:
          type: integer

    CartItemResponseApiDto:
      type: object
      properties:
        menuItemId:
          type: integer
        menuItemName:
          type: string
        quantity:
          type: integer
        totalPrice:
          type: integer

    CartItemRequestApiDto:
      type: object
      properties:
        menuItemId:
          type: integer
        quantity:
          type: integer
        totalPrice:
          type: integer

    ApiResponse:
      type: object
      properties:
        statusMessage:
          type: string
          example: "Order placed successfully"
        data:
          type: object
          nullable: true

    PageInfo:
      type: object
      properties:
        size:
          type: integer
          example: 10
        pageNumber:
          type: integer
          example: 1
        totalElements:
          type: integer
          example: 20
        totalPages:
          type: integer
          example: 4

    MenuApiDto:
      type: object
      properties:
        id:
          type: integer
          example: 10
        menuName:
          type: string
          example: "Main Course"
        restaurantName:
          type: string
          example: "Pizza pop"
        menuItems:
          type: array
          items:
            $ref: '#/components/schemas/MenuItemDto'

    MenuItemDto:
      type: object
      properties:
        id:
          type: integer
          example: 1
        itemName:
          type: string
          example: "Margherita Pizza"
        price:
          type: integer
          example: 75
        available:
          type: boolean
          example: true

    PagedMenuApiResponse:
      type: object
      properties:
        statusMessage:
          type: string
          example: null
        data:
          type: array
          items:
            $ref: '#/components/schemas/MenuApiDto'
        page:
          $ref: '#/components/schemas/PageInfo'
      example:
        statusMessage: null
        data:
          - id: 6
            menuName: "Lunch Specials"
            restaurantName: "Pizza pop"
            menuItems: []
          - id: 7
            menuName: "Dinner Delights"
            restaurantName: "Pizza pop"
            menuItems:
              - id: 1
                itemName: "Pepperoni"
                price: 65
                available: true
        page:
          size: 10
          pageNumber: 1
          totalElements: 20
          totalPages: 2

    MenuApiRequestDto:
      type: object
      properties:
        menuName:
          type: string
          example: "compo menu"
        restaurantId:
          type: integer
          example: 1

    UpdatedMenuNameRequest:
      type: object
      properties:
        menuName:
          type: string
          example: "New Menu Name"

    MenuItemApiDto:
      type: object
      properties:
        id:
          type: integer
          example: 10
        itemName:
          type: string
          example: "Pepperoni Pizza"
        price:
          type: integer
          example: 75
        available:
          type: boolean
          example: true

    MenuItemApiRequestDto:
      type: object
      required:
        - menuId
        - itemName
        - price
      properties:
        menuId:
          type: integer
          example: 3
        itemName:
          type: string
          example: "Margherita Pizza"
        price:
          type: integer
          example: 50

    UpdatedMenuItemRequest:
      type: object
      required:
        - itemName
        - price
        - available
      properties:
        itemName:
          type: string
          example: "Updated Pizza Name"
        price:
          type: integer
          example: 60
        available:
          type: boolean
          example: false
