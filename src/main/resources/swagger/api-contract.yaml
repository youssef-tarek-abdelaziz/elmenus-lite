openapi: 3.0.1
info:
  title: Elmenus Lite API
  version: 1.0.0
  description: API for Elmenus Lite


tags:
  - name: Order
    description: Operations related to customer orders
  - name: Cart
    description: Operations related to user carts


paths:
  /api/v1/cart/{customerId}:
    get:
      tags:
        - Cart
      summary: Get cart by customer ID
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the customer whose cart is being requested
      responses:
        '200':
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseCartResponseApiDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/cart/{id}/items:
    get:
      tags:
        - Cart
      summary: Get all items in a cart by cart ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Cart ID
      responses:
        '200':
          description: List of items in the cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusMessage:
                    type: string
                    nullable: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CartItemResponseApiDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/cart/{id}:
    post:
      tags:
        - Cart
      summary: post cart items to cart
      operationId: addOrUpdateCartItems
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Cart ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CartItemRequestApiDto'
      responses:
        '200':
          description: List of items in the cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusMessage:
                    type: string
                    nullable: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CartItemResponseApiDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/cart/{id}/clear:
    delete:
      tags:
        - Cart
      summary: delete all cart items
      operationId: clearCart
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Cart ID
      responses:
        '200':
          description: List of items in the cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusMessage:
                    type: string
                    nullable: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CartItemResponseApiDto'

        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/orders/{orderId}/status/{statusName}:
    put:
      tags:
        - Order
      summary: Update Order Status
      description: Updates an orderâ€™s status, enforcing valid transitions in the order lifecycle, Supports cancellation at any stage.
      operationId: updateOrderStatus
      parameters:
        - name: orderId
          in: path
          required: true
          description: ID of the order to update
          schema:
            type: integer
            example: 8
        - name: statusName
          in: path
          required: true
          description: New status to set for the order (e.g., PREPARING, CANCELLED)
          schema:
            type: string
            example: READY_FOR_PICKUP
      responses:
        '200':
          description: Order status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid input or invalid status transition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Order or status not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /api/v1/orders/:
    post:
      tags:
        - Order
      summary: Place a new order
      description: Create a new order with customer info, items, and optional promotion code
      operationId: makeOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderApiDto'
      responses:
        '200':
          description: Order placed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/orders/{orderId}:
    get:
      tags:
        - Order
      summary: Get Order Details
      description: Retrieve detailed information about a specific order using its ID.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
            example: 101
          description: ID of the order to retrieve
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderApiDto'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/orders/customers/{customerId}/orders:
    get:
      tags:
        - Order
      summary: Get all orders by customer ID
      description: Retrieves a paginated list of all orders for a specific customer.
      operationId: getOrdersByCustomer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
            example: 23
          description: ID of the customer
        - name: pageNumber
          in: query
          required: false
          schema:
            type: integer
            default: 0
          description: Page number for pagination
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Page size (number of orders per page)
      responses:
        '200':
          description: List of orders retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/OrderApiDto'
                  pageInfo:
                    $ref: '#/components/schemas/PageInfo'
        '404':
          description: Orders not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

components:
  schemas:
    OrderApiDto:
      type: object
      required:
        - customerId
        - items
      properties:
        customerId:
          type: integer
          format: int64
          example: 123
        promotionCode:
          type: string
          example: WELCOME10
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemApiDto'
        address:
          $ref: '#/components/schemas/AddressApiDto'

    OrderItemApiDto:
      type: object
      required:
        - menuItemId
        - quantity
      properties:
        menuItemId:
          type: integer
          format: int64
          example: 45
        quantity:
          type: integer
          example: 2

    AddressApiDto:
      type: object
      properties:
        street:
          type: string
          example: "123 Main St"
        city:
          type: string
          example: "Cairo"
        floor:
          type: string
          example: "2"
        apartment:
          type: string
          example: "5B"
        country:
          type: string
          example: "Egypt"
        state:
          type: string
          example: "Giza"
        location:
          type: string
          example: "29.9876, 31.2111"
        isDefault:
          type: boolean
          example: true

    ApiResponseCartResponseApiDto:
      type: object
      properties:
        statusMessage:
          type: string
          nullable: true
        data:
          $ref: '#/components/schemas/CartResponseApiDto'

    CartResponseApiDto:
      type: object
      properties:
        id:
          type: integer
        cartItemApiDtoList:
          type: array
          items:
            $ref: '#/components/schemas/CartItemResponseApiDto'
        totalPrice:
          type: integer

    CartItemResponseApiDto:
      type: object
      properties:
        menuItemId:
          type: integer
        menuItemName:
          type: string
        quantity:
          type: integer
        totalPrice:
          type: integer

    CartItemRequestApiDto:
      type: object
      properties:
        menuItemId:
          type: integer
        quantity:
          type: integer
        totalPrice:
          type: integer

    ApiResponse:
      type: object
      properties:
        statusMessage:
          type: string
          example: "Order placed successfully"
        data:
          type: object
          nullable: true

    PageInfo:
      type: object
      properties:
        size:
          type: integer
          example: 10
        pageNumber:
          type: integer
          example: 1
        totalElements:
          type: integer
          example: 20
        totalPages:
          type: integer
          example: 4
